#!/usr/bin/env ruby
require_relative '../lib/recycle'
require_relative '../lib/recycle/list'

require 'fileutils'
require 'rubygems'
require 'yaml'
require 'commander/import'

program :name, 'Recycle'
program :version, Recycle::VERSION
program :description, 'A command for storing frequently used commands.'

default_command :help

RECYCLE_HOME   = File.join(ENV['RECYCLE_ROOT'] || Dir.home, '.recycle')
DATA_FILE      = File.join(RECYCLE_HOME, 'data.yml')
RECYCLE_CONFIG = File.exists?(DATA_FILE) ? YAML.load_file(DATA_FILE) : {}

command :init do |cmd|
  cmd.syntax = 'recycle init'
  cmd.description = 'Setup the recycle storage directory. RECYCLE_ROOT env variable to change destination'
  cmd.action do
    FileUtils.mkdir_p(RECYCLE_HOME)
    File.open(DATA_FILE, 'w') { |f| f.write RECYCLE_CONFIG.to_yaml }
  end
end

command :list do |cmd|
  cmd.syntax = 'recycle list <filter>'
  cmd.description = 'List all recycle entires. filter can be "dir" or "cmd"'
  cmd.action do |args|
    output = ''
    
    show_commands    = args.length.zero? || args.include?('cmd')
    show_directories = args.length.zero? || args.include?('dir')
    
    puts Recycle::List.render_section('Commands', RECYCLE_CONFIG.fetch('commands', {})) if show_commands
    puts Recycle::List.render_section('Directories', RECYCLE_CONFIG.fetch('directories', {})) if show_directories

    unless show_commands || show_directories
      output << <<~DOC
      Usage
      ================================================================================

        recycle list     - Lists out all entities
        recycle list dir - Lists out directory entities
        recycle list cmd - Lists out command entities
      DOC
    end
    puts output
  end
end

command :add do |cmd|
  cmd.syntax = 'recycle add [OPTION]'
  cmd.description = 'Add an entry.'
  cmd.option '-d', '--dir "STRING"', String, 'Adds a directory entry'
  cmd.option '-c', '--cmd "STRING"', String, 'Adds a command entry'

  cmd.action do |args, options|
    if options.dir
      (new_item = {})[options.dir] = args.first
      RECYCLE_CONFIG["directories"].merge!(new_item)
    end

    if options.cmd
      (new_item = {})[options.cmd] = args.first
      RECYCLE_CONFIG["commands"].merge!(new_item)
    end

    File.open(DATA_FILE, 'w') { |f| f.write RECYCLE_CONFIG.to_yaml }
  end
end

command :remove do |cmd|
  cmd.syntax = 'recycle remove [OPTION]'
  cmd.description = 'Remove an entry.'
  cmd.option '-d', '--dir "STRING"', String, 'Removes a directory entry'
  cmd.option '-c', '--cmd "STRING"', String, 'Removes a command entry'

  cmd.action do |args, options|
    RECYCLE_CONFIG["directories"].delete(options.dir.strip) if options.dir
    RECYCLE_CONFIG["commands"].delete(options.cmd.strip) if options.cmd
    File.open(DATA_FILE, 'w') { |f| f.write RECYCLE_CONFIG.to_yaml }
  end
end
