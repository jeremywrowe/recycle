#!/usr/bin/env ruby
require 'recycle'
require 'fileutils'
require 'rubygems'
require 'yaml'
require 'commander/import'

require_relative '../lib/recycle/util'
require_relative '../lib/recycle/list'

program :name, 'Recycle'
program :version, Recycle::VERSION
program :description, 'A command for storing frequently used commands.'

default_command :help

RECYCLE_HOME   = File.join(ENV['RECYCLE_ROOT'] || Dir.home, '.recycle')
DATA_FILE      = File.join(RECYCLE_HOME, 'data.yml')
RECYCLE_CONFIG = File.exists?(DATA_FILE) ? YAML.load_file(DATA_FILE) : {}

RECYCLE_CONFIG['commands'] ||= {}
RECYCLE_CONFIG['directories'] ||= {}

command :init do |cmd|
  cmd.syntax = 'recycle init'
  cmd.description = 'Setup the recycle storage directory. RECYCLE_ROOT env variable to change destination'
  cmd.action do
    FileUtils.mkdir_p(RECYCLE_HOME)
    File.open(DATA_FILE, 'w') { |f| f.write RECYCLE_CONFIG.to_yaml }
  end
end

command :list do |cmd|
  cmd.syntax = 'recycle list <filter>'
  cmd.description = 'List all recycle entire.'
  cmd.option '-d', '--dir', String, 'Filters down to just directores'
  cmd.option '-c', '--cmd', String, 'Filters down to just commands'

  cmd.action do |args, options|
    output = ''
    
    commands         = RECYCLE_CONFIG.fetch('commands', {})
    directories      = RECYCLE_CONFIG.fetch('directories', {})
    show_all         = !options.cmd && !options.dir
    show_commands    = (options.cmd || show_all) && commands.length.positive?
    show_directories = (options.dir || show_all) && directories.length.positive?
    data = []
    

    data <<  Recycle::List.render_section('Commands', commands) if show_commands
    data <<  Recycle::List.render_section('Directories', directories) if show_directories

    if show_commands || show_directories
      puts data.join("\n")
    else
      output << <<~DOC
      There are currently no commands or directories in your configuration.
      To add a command or directory checkout:

      recycle add -h
      DOC
      puts output
    end
  end
end

command :add do |cmd|
  cmd.syntax = 'recycle add [OPTION]'
  cmd.description = 'Add an entry.'
  cmd.option '-d', '--dir "STRING"', String, 'Adds a directory entry'
  cmd.option '-c', '--cmd "STRING"', String, 'Adds a command entry'

  cmd.action do |args, options|
    if !options.dir && !options.cmd
      puts <<~DOC
      #{Recycle::Util.header('Usage')}
      recycle add -c IDENTIFIER "value here" - adds the command named IDENTIFIER with the value provided in quotes
      recycle add -d IDENTIFIER "value here" - adds the command named IDENTIFIER with the value provided in quotes
      DOC
      exit 1
    end

    if options.dir
      (new_item = {})[options.dir] = args.first
      RECYCLE_CONFIG["directories"].merge!(new_item)
    end

    if options.cmd
      (new_item = {})[options.cmd] = args.first
      RECYCLE_CONFIG["commands"].merge!(new_item)
    end

    File.open(DATA_FILE, 'w') { |f| f.write RECYCLE_CONFIG.to_yaml }
  end
end

command :remove do |cmd|
  cmd.syntax = 'recycle remove [OPTION]'
  cmd.description = 'Remove an entry.'
  cmd.option '-d', '--dir "STRING"', String, 'Removes a directory entry'
  cmd.option '-c', '--cmd "STRING"', String, 'Removes a command entry'

  cmd.action do |args, options|
    if !options.dir && !options.cmd
      puts <<~DOC
      #{Recycle::Util.header('Usage')}
      recycle remove -c IDENTIFIER - removes the command named IDENTIFIER
      recycle remove -d IDENTIFIER - removes the command named IDENTIFIER
      DOC
      exit 1
    end
    RECYCLE_CONFIG["directories"].delete(options.dir.strip) if options.dir
    RECYCLE_CONFIG["commands"].delete(options.cmd.strip) if options.cmd
    File.open(DATA_FILE, 'w') { |f| f.write RECYCLE_CONFIG.to_yaml }
  end
end

command :exec do |cmd|
  cmd.syntax = 'recycle exec'
  cmd.description = 'Outputs all configuration in a shell consumable manner'
  cmd.action do
    RECYCLE_CONFIG.fetch('directories', {}).each do |key, value|
      puts %|alias #{key}="cd #{value}"|
    end

    RECYCLE_CONFIG.fetch('commands', {}).each do |key, value|
      puts <<~DOC
        function #{key}() {
          #{value}
        }
      DOC
    end
  end
end
